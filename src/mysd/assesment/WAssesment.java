/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * WAssesment.java
 *
 * Created on Mar 8, 2010, 7:26:13 PM
 */
package mysd.assesment;

import java.sql.*;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import mysd.DBSystem;
import mysd.GeneralDB;
import mysd.Utils;
import mysd.dbo.TBLAssesment;
import mysd.dbo.TBLAssesmentDetails;

/**
 *
 * @author salamk
 */
public class WAssesment extends javax.swing.JFrame {

    /** Creates new form WAssesment */
    public WAssesment() {
        initComponents();
        setLocationRelativeTo(null);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblStudents = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblMarks = new javax.swing.JTable();
        btnRemove = new javax.swing.JButton();
        btnAdd1 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        btnApply = new javax.swing.JButton();
        tfTotalDays = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tfDaysAttended = new javax.swing.JTextField();
        cmbExamID = new mysd.CCMBExamID();
        cmbGradeID = new mysd.CCMBGrade();
        cmbCourse = new mysd.CCMBCourse();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tblStudents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Student ID", "Name", "Father Name", "DOB", "Address L1", "Address L2", "Contact"
            }
        ));
        tblStudents.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblStudentsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblStudents);
        tblStudents.getColumnModel().getColumn(0).setPreferredWidth(10);
        tblStudents.getColumnModel().getColumn(3).setPreferredWidth(10);
        tblStudents.getColumnModel().getColumn(6).setPreferredWidth(20);

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        tblMarks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CCode", "Name", "Total Marks", "Passing Marks", "Marks Achieved", "Paper Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblMarks);

        btnRemove.setText("Remove Selected Row");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnAdd1.setText("Clear Marks");
        btnAdd1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdd1ActionPerformed(evt);
            }
        });

        jButton1.setText("List");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnApply.setText("Apply");
        btnApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyActionPerformed(evt);
            }
        });

        tfTotalDays.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfTotalDays.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tfTotalDays.setDisabledTextColor(new java.awt.Color(102, 0, 102));
        tfTotalDays.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfTotalDaysActionPerformed(evt);
            }
        });

        jLabel1.setText("Total Days");

        jLabel2.setText("Days Attended");

        tfDaysAttended.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfDaysAttended.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tfDaysAttended.setDisabledTextColor(new java.awt.Color(102, 0, 102));
        tfDaysAttended.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfDaysAttendedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 876, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 876, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(cmbExamID, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbGradeID, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(cmbCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAdd1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRemove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 117, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(tfTotalDays, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfDaysAttended))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2))))
                    .addComponent(btnApply, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(cmbExamID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbGradeID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnAdd)
                        .addComponent(btnAdd1)
                        .addComponent(btnRemove)
                        .addComponent(cmbCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tfTotalDays, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfDaysAttended, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnApply)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
        int row = tblMarks.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tblMarks.getModel();
        model.removeRow(row);
}//GEN-LAST:event_btnRemoveActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        addCourse();
}//GEN-LAST:event_btnAddActionPerformed

    private void btnAdd1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdd1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAdd1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        setStudentList((String) this.cmbGradeID.getSelectedItem());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void tblStudentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblStudentsMouseClicked
        // TODO add your handling code here:
        int row = this.tblStudents.getSelectedRow();
        String student_id = (String) this.tblStudents.getValueAt(row, 0);
        String eid = (String) cmbExamID.getSelectedItem();
        boolean alreadyIssued = this.checkAlreadyIssued(eid, student_id);
        if (alreadyIssued) {
            btnApply.setEnabled(false);
            getMarksRecord(eid, student_id);
        } else {
            //getMarksRecord(eid, student_id);
            btnApply.setEnabled(true);
        }
//        int row = this.tblStudents.getSelectedRow();
//        String student_id = (String)this.tblStudents.getValueAt(row, 0);
//        String name = (String)this.tblStudents.getValueAt(row, 0);
//        String fname = (String)this.tblStudents.getValueAt(row, 0);
//        String dob = (String)this.tblStudents.getValueAt(row, 0);
//
//
//
//
        //this.getPreviousRecord((String)cmbExamID.getSelectedItem());
    }//GEN-LAST:event_tblStudentsMouseClicked

    public void getMarksRecord(String eid, String studentID){
        studentID = studentID.substring(2);
        String aid = eid + studentID;
        String query = "SELECT COURSE_CODE, COURSE_NAME, TOTAL_MARKS,"
                + "PASSING_MARKS, MARKS_ACHIEVED, PAPER_DATE FROM "
                + "tbl_assesment_details WHERE ASSESMENT_ID like '"+aid+"'";
        DefaultTableModel model = (DefaultTableModel)tblMarks.getModel();
        model.setRowCount(0);
        GeneralDB gdb = new GeneralDB();
        ArrayList al = gdb.searchRecord(query);
        Iterator i = al.iterator();
        while(i.hasNext()){
            Vector v = (Vector)i.next();
            String ccode = (String)v.get(0);
            String cname = (String)v.get(1);
            String tm  = (String)v.get(2);
            String pm = (String)v.get(3);
            String ma = (String)v.get(4);
            String pdate  = (String)v.get(5);

            Vector row = new Vector();
            row.add(ccode);
            row.add(cname);
            row.add(Integer.parseInt(tm));
            row.add(Integer.parseInt(pm));
            row.add(Integer.parseInt(ma));
            row.add(pdate);


            model.addRow(row);
        }
        
    }

    private void btnApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyActionPerformed
        // TODO add your handling code here:
        int row = this.tblStudents.getSelectedRow();
        String student_id = (String) this.tblStudents.getValueAt(row, 0);
        String eid = (String) cmbExamID.getSelectedItem();
        boolean alreadyIssued = this.checkAlreadyIssued(eid, student_id);
        if (alreadyIssued) {
            Utils.msg("Mark Sheet already issued\nCannot edit/update/save");
        } else {
            boolean saved = saveRecord();
            if (saved) {
                Utils.msg("Record saved successfully");
            } else {
                Utils.msg("<HTML><FONT COLOR = RED><B>Record could not be saved");
            }
        }
    }//GEN-LAST:event_btnApplyActionPerformed

    private void cmbExamIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbExamIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbExamIDActionPerformed

    private void tfTotalDaysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfTotalDaysActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_tfTotalDaysActionPerformed

    private void tfDaysAttendedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfDaysAttendedActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_tfDaysAttendedActionPerformed

    public void setStudentList(String grade) {
        String query = "";
        query += "SELECT STUDENT.STUDENT_ID, "
                + "STUDENT.FULL_NAME, "
                + "STUDENT.FATHER_NAME, STUDENT.DATE_OF_BIRTH "
                + "FROM  STUDENT, CURRENTENROLLMENT "
                + "WHERE  STUDENT.STUDENT_ID = CURRENTENROLLMENT.STUDENTID and  "
                + "CURRENTENROLLMENT.GRADEID like '" + grade + "'";


        DefaultTableModel model_tblStudent = (DefaultTableModel) tblStudents.getModel();
        model_tblStudent.setRowCount(0);

        GeneralDB gdb = new GeneralDB();

        ArrayList al = gdb.searchRecord(query);
        Iterator i = al.iterator();
        while (i.hasNext()) {
            Vector<String> row = (Vector) i.next();
            String studentID = (String) row.get(0);
            Vector ac = this.getAddressContact(studentID);
            row.add((String) ac.get(0));
            row.add((String) ac.get(1));
            row.add((String) ac.get(2));
            model_tblStudent.addRow(row);
        }
    }

    public Vector getAddressContact(String student_id) {
        String query = "SELECT HOUSENO, STREET, BLOCK, SECTOR, LOCALITY,"
                + "TOWN, OTHERINFO, DISTRICT FROM STUDENTADDRESS WHERE "
                + "STUDENTID LIKE '" + student_id + "'";
        GeneralDB gdb = new GeneralDB();
        Vector v = gdb.getSingleRow(query);

        String houseNo = (String) v.get(0);
        String street = (String) v.get(1);
        String block = (String) v.get(2);
        String sector = (String) v.get(3);
        String locality = (String) v.get(4);
        String town = (String) v.get(5);
        String otherInfo = (String) v.get(6);
        String district = (String) v.get(7);

        if (houseNo == null || houseNo.length() <= 0) {
            houseNo = "";
        }
        if (street == null || street.length() <= 0) {
            street = "";
        }
        if (block == null || block.length() <= 0) {
            block = "";
        }
        if (sector == null || sector.length() <= 0) {
            sector = "";
        }
        if (locality == null || locality.length() <= 0) {
            locality = "";
        }
        if (town == null || town.length() <= 0) {
            town = "";
        }
        if (otherInfo == null || otherInfo.length() <= 0) {
            otherInfo = "";
        }
        if (district == null || district.length() <= 0) {
            district = "";
        }

        String adLine1 = "";
        String blockSec = "";
        if (block.compareToIgnoreCase("") == 0 && sector.compareToIgnoreCase("") == 0) {
            blockSec = "";
        } else {
            blockSec = "Block/Sec: " + block + " " + sector;
        }

        adLine1 += houseNo + " " + street + " " + blockSec + " " + locality;

        String adLine2 = "";
        adLine2 += otherInfo + " " + town + " " + district;

        Vector ac = new Vector();
        ac.add(adLine1);
        ac.add(adLine2);

        query = "SELECT HOME_PHONE, MOBILE_PHONE, OFFICE_PHONE FROM "
                + "STUDENTCONTACT WHERE STUDENTID LIKE '" + student_id + "'";

        v.clear();
        v = gdb.getSingleRow(query);
        String homePhone = (String) v.get(0);
        String mobilePhone = (String) v.get(1);
        String officePhone = (String) v.get(2);

        String contactLine = homePhone + " " + mobilePhone + " " + officePhone;
        ac.add(contactLine);

        return ac;
    }

    public void addCourse() {

        String ccode = cmbCourse.getCourseCode();
        String cname = cmbCourse.getCourseName();
        int tm = 0;
        int pm = 0;
        int ma = 0;

        Vector v = new Vector();
        v.add(ccode);
        v.add(cname);
        v.add(tm);
        v.add(pm);
        v.add(ma);

        DefaultTableModel model = (DefaultTableModel) tblMarks.getModel();
        model.addRow(v);
    }

    public boolean checkAlreadyIssued(String examID, String studentID) {
        boolean alreadyIssued = false;
        GeneralDB gdb = new GeneralDB();
        studentID = studentID.substring(2);
        String aid = examID + studentID;
        String query = "SELECT * FROM tbl_assesment WHERE ASSESMENT_ID LIKE '" + aid + "'";
        Vector v = gdb.getSingleRow(query);
        if (v == null) {
            alreadyIssued = false;
        } else {
            alreadyIssued = true;
        }
        return alreadyIssued;
    }

    public boolean saveRecord() {

        DBSystem dbs = new DBSystem();

        boolean saved = true;
        int row = this.tblStudents.getSelectedRow();
        String student_id = (String) this.tblStudents.getValueAt(row, 0);
        String name = (String) this.tblStudents.getValueAt(row, 1);
        String father_name = (String) this.tblStudents.getValueAt(row, 2);
        String dob = (String) this.tblStudents.getValueAt(row, 3);
        String adl1 = (String) this.tblStudents.getValueAt(row, 4);
        String adl2 = (String) this.tblStudents.getValueAt(row, 5);
        String contact_line = (String) this.tblStudents.getValueAt(row, 6);

        String exam_id = (String) this.cmbExamID.getSelectedItem();
        String assesment_id = exam_id + student_id.substring(2);

        String grade_id = (String) this.cmbGradeID.getSelectedItem();
        String total_marks = getTotalMarks();
        String marks_achieved = getMarksAchieved();
        String percent_marks = calculatePercentage(total_marks, marks_achieved);
        String status = getResultStatus();
        String total_working_days = this.tfTotalDays.getText();
        String days_attended = this.tfDaysAttended.getText();
        String user_id = dbs.getLoginUser();
        String ttime = dbs.getTransactionTime();

        Connection con = dbs.getConnection();
        try {
            con.setAutoCommit(false);
            String query = "INSERT INTO " + TBLAssesment.TABLE_NAME + "("
                    + "" + TBLAssesment.ASSESMENT_ID + ","
                    + "" + TBLAssesment.EXAM_ID + ","
                    + "" + TBLAssesment.STUDENT_ID + ","
                    + "" + TBLAssesment.NAME + ","
                    + "" + TBLAssesment.FATHER_NAME + ","
                    + "" + TBLAssesment.DATE_OF_BIRTH + ","
                    + "" + TBLAssesment.ADDRESS_LINE_1 + ","
                    + "" + TBLAssesment.ADDRESS_LINE_2 + ","
                    + "" + TBLAssesment.CONTACT_LINE + ","
                    + "" + TBLAssesment.GRADE_ID + ","
                    + "" + TBLAssesment.TOTAL_MARKS + ","
                    + "" + TBLAssesment.MARKS_ACHIEVED + ","
                    + "" + TBLAssesment.PERCENT_MARKS + ","
                    + "" + TBLAssesment.RESULT_STATUS + ","
                    + "" + TBLAssesment.TOTAL_WORKING_DAYS + ","
                    + "" + TBLAssesment.DAYS_ATTENDED + ","
                    + "" + TBLAssesment.USER_ID + ","
                    + "" + TBLAssesment.TRANSACTION_TIME + ")VALUES("
                    + "'" + assesment_id + "',"
                    + "'" + exam_id + "',"
                    + "'" + student_id + "',"
                    + "'" + name + "',"
                    + "'" + father_name + "',"
                    + "'" + dob + "',"
                    + "'" + adl1 + "',"
                    + "'" + adl2 + "',"
                    + "'" + contact_line + "',"
                    + "'" + grade_id + "',"
                    + "" + total_marks + ","
                    + "" + marks_achieved + ","
                    + "" + percent_marks + ","
                    + "'" + status + "',"
                    + "'" + total_working_days + "',"
                    + "'" + days_attended + "',"
                    + "'" + user_id + "',"
                    + "'" + ttime + "')";

            Statement stmt = con.createStatement();
            System.out.println(query);
            stmt.executeUpdate(query);

            int r = this.tblMarks.getRowCount();
            for (int i = 0; i <= r - 1; i++) {
                String course_code = (String) this.tblMarks.getValueAt(i, 0);
                String course_name = (String) this.tblMarks.getValueAt(i, 1);
                String tm = Integer.toString((Integer) this.tblMarks.getValueAt(i, 2));
                String pm = Integer.toString((Integer) this.tblMarks.getValueAt(i, 3));
                String ma = Integer.toString((Integer) this.tblMarks.getValueAt(i, 4));

                String st = "";
                if (Integer.parseInt(ma) < Integer.parseInt(pm)) {
                    st = "FAILED";
                } else {
                    st = "PASSED";
                }

                String paper_date = (String) this.tblMarks.getValueAt(i, 5);


                String dquery = "INSERT INTO " + TBLAssesmentDetails.TABLE_NAME + "("
                        + "" + TBLAssesmentDetails.ASSESMENT_ID + ","
                        + "" + TBLAssesmentDetails.COURSE_CODE + ","
                        + "" + TBLAssesmentDetails.COURSE_NAME + ","
                        + "" + TBLAssesmentDetails.TOTAL_MARKS + ","
                        + "" + TBLAssesmentDetails.PASSING_MARKS + ","
                        + "" + TBLAssesmentDetails.MARKS_ACHIEVED + ","
                        + "" + TBLAssesmentDetails.PAPER_DATE + ","
                        + "" + TBLAssesmentDetails.STATUS + ")VALUES("
                        + "'" + assesment_id + "',"
                        + "'" + course_code + "',"
                        + "'" + course_name + "',"
                        + "" + tm + ","
                        + "" + pm + ","
                        + "" + ma + ","
                        + "'" + paper_date + "',"
                        + "'" + st + "')";

                System.out.println(dquery);

                stmt.executeUpdate(dquery);


            }


            con.commit();
            con.setAutoCommit(true);
            dbs.closeConnection(con);
            saved = true;

        } catch (Exception e) {
            Utils.msg(e.getMessage());
            try {
                con.rollback();
            } catch (Exception ee) {
            }
            dbs.closeConnection(con);
            saved = false;
        }

        return saved;
    }

    public String getTotalMarks() {
        int r = this.tblMarks.getRowCount();
        int total_marks = 0;
        for (int i = 0; i <= r - 1; i++) {
            int this_paper = (Integer) tblMarks.getValueAt(i, 2);
            total_marks += this_paper;
        }

        return Integer.toString(total_marks);
    }

    public String getMarksAchieved() {
        int r = this.tblMarks.getRowCount();
        int total_marks = 0;
        for (int i = 0; i <= r - 1; i++) {
            int this_paper = (Integer) tblMarks.getValueAt(i, 4);
            total_marks += this_paper;
        }

        return Integer.toString(total_marks);
    }

    public String getResultStatus() {
        int r = this.tblMarks.getRowCount();
        String status = "PASSED";

        for (int i = 0; i <= r - 1; i++) {
            int pm = (Integer) tblMarks.getValueAt(i, 3);
            int ma = (Integer) tblMarks.getValueAt(i, 4);

            if (ma < pm) {
                status = "FAILED";
            }

        }

        return status;
    }

    public String calculatePercentage(String total_marks, String marks_achieved) {
        int tm = Integer.parseInt(total_marks);
        int ma = Integer.parseInt(marks_achieved);
        double pm = (ma / tm) * 100;
        return Double.toString(pm);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new WAssesment().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAdd1;
    private javax.swing.JButton btnApply;
    private javax.swing.JButton btnRemove;
    private mysd.CCMBCourse cmbCourse;
    private mysd.CCMBExamID cmbExamID;
    private mysd.CCMBGrade cmbGradeID;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblMarks;
    private javax.swing.JTable tblStudents;
    private javax.swing.JTextField tfDaysAttended;
    private javax.swing.JTextField tfTotalDays;
    // End of variables declaration//GEN-END:variables
}
