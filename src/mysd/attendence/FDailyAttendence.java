/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FDailyAttendence.java
 *
 * Created on Jan 29, 2011, 9:39:02 PM
 */

package mysd.attendence;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Vector;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;
import mysd.GeneralDB;
import mysd.Utils;
import net.miginfocom.swing.MigLayout;

/**
 *
 * @author salam
 */
public class FDailyAttendence extends javax.swing.JFrame {

    /** Creates new form FDailyAttendence */
    public FDailyAttendence() {
        initComponents();
        setClassesList();
        this.getContentPane().setBackground(Color.LIGHT_GRAY);
        setLocationRelativeTo(null);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblClasses = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblAttendence = new javax.swing.JTable();
        tfAttendenceDate = new acr.component.CDateField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        tblClasses.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Room ID", "Total Student", "Present", "Not Present"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblClasses.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblClassesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblClasses);
        tblClasses.getColumnModel().getColumn(0).setPreferredWidth(10);
        tblClasses.getColumnModel().getColumn(1).setPreferredWidth(50);
        tblClasses.getColumnModel().getColumn(2).setPreferredWidth(20);
        tblClasses.getColumnModel().getColumn(3).setPreferredWidth(10);

        tblAttendence.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tblAttendence.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Student ID", "Name", "Attendence"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblAttendence.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAttendenceMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblAttendence);
        tblAttendence.getColumnModel().getColumn(0).setPreferredWidth(10);
        tblAttendence.getColumnModel().getColumn(1).setPreferredWidth(50);
        tblAttendence.getColumnModel().getColumn(2).setPreferredWidth(10);

        tfAttendenceDate.setBackground(new java.awt.Color(0, 102, 0));
        tfAttendenceDate.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tfAttendenceDate.setEditable(false);
        tfAttendenceDate.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfAttendenceDate.setDisabledTextColor(new java.awt.Color(255, 255, 255));
        tfAttendenceDate.setEnabled(false);
        tfAttendenceDate.setFont(new java.awt.Font("Dialog", 1, 12));

        jScrollPane3.setBorder(null);

        jTextPane1.setBackground(java.awt.Color.lightGray);
        jTextPane1.setBorder(null);
        jTextPane1.setForeground(new java.awt.Color(0, 0, 51));
        jTextPane1.setText("Double click on room id column. The attendence details of selected class room will appear in the table above. Double click on student id. The attendence window will appear. Update the attendence and press save button.");
        jScrollPane3.setViewportView(jTextPane1);

        jButton1.setText("Refresh");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Build Report");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
                    .addComponent(tfAttendenceDate, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 220, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tfAttendenceDate, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tblClassesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblClassesMouseClicked
        // TODO add your handling code here:
        int clickCount = evt.getClickCount();
        if(clickCount == 2){
            int col = tblClasses.getSelectedColumn();
            int row = tblClasses.getSelectedRow();

            String classID = (String)tblClasses.getValueAt(row, 0);
            setAttendenceList(classID);
        }
    }//GEN-LAST:event_tblClassesMouseClicked

    private void tblAttendenceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAttendenceMouseClicked
        // TODO add your handling code here:
        int clickCount = evt.getClickCount();
        if(clickCount == 2){
            int col = tblAttendence.getSelectedColumn();
            int row = tblAttendence.getSelectedRow();

            String studentID = (String)tblAttendence.getValueAt(row, 0);
            getAttendence(studentID);
        }
    }//GEN-LAST:event_tblAttendenceMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.setClassesList();
    }//GEN-LAST:event_jButton1ActionPerformed

    public void getAttendence(final String studentID){
        
        JButton btnSave = new JButton("Save/Update");
        final FAttendence attendence = new FAttendence();
        final JFrame frame = new JFrame("Student Attendence");
        attendence.pnlMain.add(btnSave,"gaptop 20,wrap");

        String query = "SELECT CLASSROOMID, GRADEID FROM "
                + "CURRENTENROLLMENT WHERE STUDENTID LIKE '"+studentID+"'";

        Vector v = GeneralDB.getSingleRow(query);
        String classRoomID = (String)v.get(0);
        String gradeID = (String)v.get(1);

        attendence.cmbClassRoom.setSelectedItem(classRoomID);
        attendence.cmbClassRoom.setEnabled(false);

        attendence.cmbGrade.setSelectedItem(gradeID);
        attendence.cmbGrade.setEnabled(false);

        attendence.tfStudentID.setText(studentID);
        attendence.tfStudentID.setEnabled(false);

        attendence.tfAttendenceDate.setText(tfAttendenceDate.getText());
        attendence.tfAttendenceDate.setEnabled(false);

        btnSave.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e){
                String dd = tfAttendenceDate.getSQLDate().replaceAll("-", "");
                String stid = studentID.substring(2);
                String atid = dd+stid;

                String classID = (String)attendence.cmbClassRoom.getSelectedItem();

                GeneralDB gdb = new GeneralDB();

                String query = "REPLACE INTO STUDENTATTENDENCE("
                        + "ATTENDENCEID, STUDENTID, GRADEID, ATTENDENCE_DATE,"
                        + "ATTENDENCE_STATE, CLASSROOMID, USERID, TTIME)VALUES("
                        + "'"+atid+"',"
                        + "'"+studentID+"',"
                        + "'"+attendence.cmbGrade.getSelectedItem()+"',"
                        + "'"+attendence.tfAttendenceDate.getSQLDate()+"',"
                        + "'"+attendence.cmbAttendenceState.getAttendenceCode()+"',"
                        + "'"+attendence.cmbClassRoom.getSelectedItem()+"',"
                        + "'"+System.getProperty("LOGIN_USER_NAME")+"',"
                        + "'"+gdb.getTimeStamp()+"')";

                String stat = gdb.execute(query);
                if(stat.compareToIgnoreCase("ok")==0){
                    setAttendenceList(classID);
                    frame.setVisible(false);
                    frame.dispose();
                    
                }else{
                    Utils.msg(stat);
                }
                
            }
        });

        
        frame.setLayout(new MigLayout());
        frame.add(attendence.pnlMain,"gaptop 50, gapleft 50");
        frame.setSize(500,350);
        frame.setLocationRelativeTo(null);
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setVisible(true);

    }
    
    public void setAttendenceList(String classID){
        String query = "SELECT STUDENTID FROM CURRENTENROLLMENT WHERE "
                + " CLASSROOMID LIKE '"+classID+"' AND "
                + "CSTATUS LIKE 'ACTIVE'";
        GeneralDB gdb = new GeneralDB();
        ArrayList al = gdb.searchRecord(query);

        //student ids
        String[] students = new String[al.size()];

        Iterator i = al.iterator();
        int j=0;
        while(i.hasNext()){
            Vector v = (Vector)i.next();
            String studentID = (String)v.get(0);
            students[j] = studentID;
            j++;
        }

        al = null;
        i = null;
        //student names
        String[] names = new String[students.length];

        for(j=0; j<=students.length-1; j++){
            query = "SELECT FULL_NAME FROM STUDENT WHERE "
                    + "STUDENT_ID like '"+students[j]+"'";

            String nm = gdb.getSingleColumnData(query);
            if(nm != null){
                names[j] = nm;
            }else{
                names[j] = "NOT FOUND";
            }
        }

        //student attendence state
        String[] attendence = new String[students.length];

        for(j=0; j<=students.length-1; j++){
            query = "SELECT ATTENDENCE_STATE FROM STUDENTATTENDENCE WHERE "
                    + "STUDENTID like '"+students[j]+"'"
                    + " AND ATTENDENCE_DATE LIKE '"+tfAttendenceDate.getSQLDate()+"'";

            String att = gdb.getSingleColumnData(query);
            System.out.println("ATT:"+att.length());
            if(att == null || att.length()==0){
                attendence[j] = "NOT TAKEN";
                
            }else{
                attendence[j] = att;
            }
        }

        //add rows to table
        DefaultTableModel model = (DefaultTableModel)this.tblAttendence.getModel();
        model.setRowCount(0);

        for(j=0; j<=students.length-1; j++){
            Vector v = new Vector();
            v.add(students[j]);
            v.add(names[j]);
            v.add(attendence[j]);
            model.addRow(v);
        }
        
    }


    public void setClassesList(){

        DefaultTableModel model = (DefaultTableModel)tblClasses.getModel();
        model.setRowCount(0);

        String query = "SELECT CLASSROOM_ID FROM CLASSROOM";
        GeneralDB gdb = new GeneralDB();
        ArrayList al = gdb.searchRecord(query);

        //total classes
        String[] classes = new String[al.size()];

        Iterator i = al.iterator();
        int j=0;
        while(i.hasNext()){
            Vector v = (Vector)i.next();
            String classid = (String)v.get(0);
            classes[j] = classid;
            j++;
        }

        //number of students in classes
        String[] numStudent = new String[classes.length];

        for(j=0; j<=classes.length-1; j++){
            query = "SELECT COUNT(*) FROM "
                    + "CURRENTENROLLMENT WHERE "
                    + "CLASSROOMID LIKE '"+classes[j]+"'"
                    + " AND CSTATUS LIKE 'ACTIVE'";

            String n = gdb.getSingleColumnData(query);
            numStudent[j] = n;
        }

        //students present in the class
        String[] present = new String[classes.length];
        
        for(j=0; j<=classes.length-1; j++){
            query = "SELECT COUNT(*) FROM "
                    + "STUDENTATTENDENCE WHERE "
                    + "CLASSROOMID LIKE '"+classes[j]+"'"
                    + " AND ATTENDENCE_DATE LIKE '"+tfAttendenceDate.getSQLDate()+"'"
                    + " AND (ATTENDENCE_STATE LIKE 'PRESENT')";

            String n = gdb.getSingleColumnData(query);
            if(n == null || n.compareTo("0")==0){
                n = "ATT NOT TAKEN";
            }
            
            present[j] = n;
        }


        //students absent/leave in the class
        String[] notPresent = new String[classes.length];

        for(j=0; j<=classes.length-1; j++){
            query = "SELECT COUNT(*) FROM "
                    + "STUDENTATTENDENCE WHERE "
                    + "CLASSROOMID LIKE '"+classes[j]+"'"
                    + " AND ATTENDENCE_DATE LIKE '"+tfAttendenceDate.getSQLDate()+"'"
                    + " AND (ATTENDENCE_STATE NOT LIKE 'PRESENT')";

            String n = gdb.getSingleColumnData(query);
                       
            notPresent[j] = n;
        }
        
         for(j=0; j<=classes.length-1; j++){
             Vector v = new Vector();
             v.add(classes[j]);
             v.add(numStudent[j]);
             v.add(present[j]);
             v.add(notPresent[j]);
             
             model.addRow(v);
         }

        
    }
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FDailyAttendence().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextPane jTextPane1;
    protected javax.swing.JTable tblAttendence;
    protected javax.swing.JTable tblClasses;
    private acr.component.CDateField tfAttendenceDate;
    // End of variables declaration//GEN-END:variables

}
