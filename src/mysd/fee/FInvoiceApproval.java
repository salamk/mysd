/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FInvoiceApproval.java
 *
 * Created on Feb 13, 2011, 3:25:54 PM
 */

package mysd.fee;

import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import mysd.GeneralDB;

/**
 *
 * @author salam
 */
public class FInvoiceApproval extends javax.swing.JFrame {

    private GeneralDB gdb;
    private DefaultTableModel modelTBLInvoice;
    private Color lavendar,aquaMarine,lightYellow,lightSalmon,slateGray;
    /** Creates new form FInvoiceApproval */
    public FInvoiceApproval(){
        initComponents();
        gdb = new GeneralDB();
        modelTBLInvoice = (DefaultTableModel)tblInvoice.getModel();
        cmbGrade.setSelectedItem("All");
        lavendar = new Color(230,230,250);
        aquaMarine = new Color(102,205,170);
        lightYellow = new Color(255,255,224);
        lightSalmon = new Color(255,160,122);
        slateGray = new Color(240,255,255);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblInvoice = new JTable(){
            public Component prepareRenderer
            (TableCellRenderer renderer,int Index_row, int Index_col) {
                Component comp = super.prepareRenderer(renderer, Index_row, Index_col);
                //Component comp = super.prepareRenderer(renderer, Index_row);
                //even index, selected or not selected
                String value = (String)tblInvoice.getValueAt(Index_row, Index_col);

                if(value == null || value.compareToIgnoreCase("")==0){
                    value = "";
                }

                if (value.compareToIgnoreCase("Issued")==0) {
                    comp.setBackground(aquaMarine);
                    //comp.setForeground(Color.green);
                } else if(value.compareToIgnoreCase("APPROVED")==0){
                    comp.setBackground(lightYellow);
                    //comp.setForeground(Color.blue);
                }else if(value.compareToIgnoreCase("CHANGED")==0){
                    comp.setBackground(lavendar);
                    //comp.setForeground(Color.red);
                }else if(value.compareToIgnoreCase("DRAFTED")==0){
                    comp.setBackground(slateGray);
                    //comp.setForeground(Color.magenta);
                }
                else {
                    comp.setBackground(Color.white);
                }
                return comp;
            }
        };
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        cmbGrade = new mysd.CCMBGrade();
        cmbGrade.addItem("All");
        jButton1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        taStatus = new javax.swing.JEditorPane();
        cmbTimeCode = new mysd.CCMBTimeCode();
        jButton2 = new javax.swing.JButton();
        cmbStatus = new mysd.CCMBTimeCode();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tblInvoice.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Invoice#", "Student#", "Issue Date", "Amount", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblInvoice.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblInvoiceMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblInvoice);
        tblInvoice.getColumnModel().getColumn(0).setResizable(false);
        tblInvoice.getColumnModel().getColumn(0).setPreferredWidth(30);
        tblInvoice.getColumnModel().getColumn(1).setResizable(false);
        tblInvoice.getColumnModel().getColumn(1).setPreferredWidth(30);
        tblInvoice.getColumnModel().getColumn(2).setResizable(false);
        tblInvoice.getColumnModel().getColumn(2).setPreferredWidth(30);
        tblInvoice.getColumnModel().getColumn(3).setResizable(false);
        tblInvoice.getColumnModel().getColumn(3).setPreferredWidth(10);
        tblInvoice.getColumnModel().getColumn(4).setResizable(false);
        tblInvoice.getColumnModel().getColumn(4).setPreferredWidth(10);

        jButton3.setBackground(new java.awt.Color(204, 204, 255));
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/approve_32.png"))); // NOI18N
        jButton3.setText("Approve Selected");
        jButton3.setOpaque(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(204, 204, 255));
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/approve_32.png"))); // NOI18N
        jButton4.setText("Approve All");
        jButton4.setOpaque(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(204, 204, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/downNavigation_32.png"))); // NOI18N
        jButton1.setOpaque(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/invoiceApproval_48.png"))); // NOI18N
        jLabel1.setText("IAP - Invoice Approval Process");
        jLabel1.setOpaque(true);

        taStatus.setBackground(javax.swing.UIManager.getDefaults().getColor("Panel.background"));
        taStatus.setEditable(false);
        taStatus.setFont(new java.awt.Font("Dialog", 0, 11));
        taStatus.setDisabledTextColor(new java.awt.Color(0, 0, 51));
        taStatus.setEnabled(false);
        jScrollPane2.setViewportView(taStatus);

        jButton2.setBackground(new java.awt.Color(204, 204, 255));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/refreshicon24.png"))); // NOI18N
        jButton2.setOpaque(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        cmbStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "DRAFTED", "APPROVED", "CHANGED", "ISSUED", "ALL" }));
        cmbStatus.setSelectedIndex(4);
        cmbStatus.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 172, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(cmbGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbTimeCode, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 565, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbTimeCode, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton3)
                        .addComponent(jButton4))
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        this.approveSelectedInvoices();
}//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        approveAllInvoices();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        String item = (String)cmbGrade.getSelectedItem();
        String status = (String)cmbStatus.getSelectedItem();
        if(item.compareToIgnoreCase("all")==0){
            listData(status);
        }else{
            listData(status, item);
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void tblInvoiceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblInvoiceMouseClicked
        // TODO add your handling code here:
        int clickCount = evt.getClickCount();
        if(clickCount == 2){
            int r = this.tblInvoice.getSelectedRow();
            String invoiceID = (String)tblInvoice.getValueAt(r, 0);
            new FInvoiceSingleView(invoiceID).setVisible(true);
        }
    }//GEN-LAST:event_tblInvoiceMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String item = (String)cmbGrade.getSelectedItem();
        String status = (String)cmbStatus.getSelectedItem();
        if(item.compareToIgnoreCase("all")==0){
            listData(status);
        }else{
            listData(status, item);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    public void listData(String status){

        modelTBLInvoice.setRowCount(0);
        String query = "";

        if(status.compareToIgnoreCase("All")==0){
            query = "SELECT INVOICE_ID, STUDENT_ID, ISSUE_DATE,"
                + " INVOICE_TOTAL, INVOICE_STATUS "
                + "FROM MONTHLYINVOICE WHERE "
                + "TIME_CODE LIKE '"+cmbTimeCode.getTimeCode()+"'";
        }else{
            query = "SELECT INVOICE_ID, STUDENT_ID, ISSUE_DATE,"
                + " INVOICE_TOTAL, INVOICE_STATUS "
                + "FROM MONTHLYINVOICE WHERE INVOICE_STATUS LIKE '"+status+"' "
                + "AND TIME_CODE LIKE '"+cmbTimeCode.getTimeCode()+"'";
        }

        

        ArrayList al = gdb.searchRecord(query);
        Iterator i = al.iterator();
        while(i.hasNext())
        {
            Vector v = (Vector)i.next();
            modelTBLInvoice.addRow(v);
        }

        updateInfo();

    }


    public void listData(String status, String gradeID){

        modelTBLInvoice.setRowCount(0);
        String query = "";

        if(status.compareToIgnoreCase("All")==0){
            query = "SELECT INVOICE_ID, STUDENT_ID, ISSUE_DATE,"
                + " INVOICE_TOTAL, INVOICE_STATUS "
                + "FROM MONTHLYINVOICE WHERE "
                + "TIME_CODE LIKE '"+cmbTimeCode.getTimeCode()+"' "
                + "AND GRADE_ID LIKE '"+gradeID+"'";
        }else{
            query = "SELECT INVOICE_ID, STUDENT_ID, ISSUE_DATE,"
                + " INVOICE_TOTAL, INVOICE_STATUS "
                + "FROM MONTHLYINVOICE WHERE INVOICE_STATUS LIKE '"+status+"' "
                + "AND TIME_CODE LIKE '"+cmbTimeCode.getTimeCode()+"' "
                + "AND GRADE_ID LIKE '"+gradeID+"'";
        }



        ArrayList al = gdb.searchRecord(query);
        Iterator i = al.iterator();
        while(i.hasNext())
        {
            Vector v = (Vector)i.next();
            modelTBLInvoice.addRow(v);
        }

        updateInfo();

    }


    public void approveAllInvoices(){
        
        int rCount = tblInvoice.getRowCount();
        for(int i=0; i<=rCount-1; i++){
            String invoiceNo = (String)tblInvoice.getValueAt(i, 0);
            String currentStatus = (String)tblInvoice.getValueAt(i, 4);

            String msgs = "";

            if(currentStatus.compareToIgnoreCase("approved")==0){
                msgs+=""+invoiceNo+": Invoice already approved\n";
            }else if(currentStatus.compareToIgnoreCase("issued")==0){
                msgs+=""+invoiceNo+": You cannot approve an invoice that is issued\n";
            }else{
                boolean approved = approveInvoice(invoiceNo);
                if(approved == true){
                    msgs+=""+invoiceNo+" :approved successfully\n";
                }else{
                    msgs+=""+invoiceNo+" :ERROR CANNOT APPROVE THIS INVOICE\n";
                }
            }
        }
    }


    public void approveSelectedInvoices(){
        int rCount = tblInvoice.getSelectedRowCount();
        int[] selectedRows = tblInvoice.getSelectedRows();
        String msgs = "";
        for(int i=0; i<=rCount-1; i++){
            String invoiceNo = (String)tblInvoice.getValueAt(selectedRows[i], 0);
            String currentStatus = (String)tblInvoice.getValueAt(selectedRows[i], 4);

            
            if(currentStatus.compareToIgnoreCase("approved")==0){
                msgs+=""+invoiceNo+": Invoice already approved\n";
            }else if(currentStatus.compareToIgnoreCase("issued")==0){
                msgs+=""+invoiceNo+": You cannot approve an invoice that is issued\n";
            }else{
                boolean approved = approveInvoice(invoiceNo);
                if(approved == true){
                    msgs+=""+invoiceNo+" :approved successfully\n";
                }else{
                    msgs+=""+invoiceNo+" :ERROR CANNOT APPROVE THIS INVOICE\n";
                }
            }
        }

        JOptionPane.showMessageDialog(null, msgs);
    }

    
    public boolean approveInvoice(String invoiceNo){
        boolean approved = false;
        if(invoiceNo == null){
            ;
        }else
        {
            String query = "UPDATE MONTHLYINVOICE SET INVOICE_STATUS = 'APPROVED' "
                    + "WHERE INVOICE_ID LIKE '"+invoiceNo+"'";
            String stats = gdb.execute(query);
            if(stats.compareToIgnoreCase("ok")==0)
                approved = true;
        }

        return approved;
    }


    
    public void updateInfo(){
        String timeCode = cmbTimeCode.getTimeCode();

        String query = "SELECT COUNT(*) FROM CURRENTENROLLMENT WHERE "
                + "CSTATUS like 'ACTIVE'";
        String cenrollment = gdb.getSingleColumnData(query);

        query = "SELECT COUNT(*) FROM MONTHLYINVOICE WHERE INVOICE_STATUS "
                + " LIKE 'DRAFTED' AND TIME_CODE LIKE '"+timeCode+"'";

        String drafted  = gdb.getSingleColumnData(query);
        
        query = "SELECT COUNT(*) FROM MONTHLYINVOICE WHERE INVOICE_STATUS "
                + " LIKE 'APPROVED' AND TIME_CODE LIKE '"+timeCode+"'";

        String approved  = gdb.getSingleColumnData(query);

        query = "SELECT COUNT(*) FROM MONTHLYINVOICE WHERE INVOICE_STATUS "
                + " LIKE 'CHANGED' AND TIME_CODE LIKE '"+timeCode+"'";
        String changed  = gdb.getSingleColumnData(query);

        query = "SELECT COUNT(*) FROM MONTHLYINVOICE WHERE INVOICE_STATUS "
                + " LIKE 'ISSUED' AND TIME_CODE LIKE '"+timeCode+"'";
        String issued  = gdb.getSingleColumnData(query);


        if(drafted.compareToIgnoreCase("")==0 || drafted == null)
            drafted = "0";

        if(approved.compareToIgnoreCase("")==0 || approved == null)
            approved = "0";

        if(changed.compareToIgnoreCase("")==0 || changed == null)
            changed = "0";

        if(issued.compareToIgnoreCase("")==0 || issued == null)
            issued = "0";

        String msg = "Total Number of Active Enrollments: "+cenrollment+"\n";
        msg+="Total Number of Drafted Invoices: "+drafted+"\n";
        msg+="Total Number of Approved Invoices: "+approved+"\n";
        msg+="Total Number of Changed Invoices: "+changed+"\n";
        msg+="Total Number of Issued Invoices: "+issued+"\n";

        taStatus.setText(msg);

    }

    
    public void updateInfo(String gradeID){

        String timeCode = cmbTimeCode.getTimeCode();
        String query = "SELECT COUNT(*) FROM CURRENTENROLLMENT WHERE "
                + "CSTATUS like 'ACTIVE' and GRADEID LIKE '"+gradeID+"'";
        String cenrollment = gdb.getSingleColumnData(query);

        query = "SELECT COUNT(*) FROM MONTHLYINVOICE WHERE INVOICE_STATUS "
                + " LIKE 'DRAFTED' AND GRADE_ID LIKE '"+gradeID+"'"
                + " AND TIME_CODE LIKE '"+timeCode+"'";

        String drafted  = gdb.getSingleColumnData(query);

        query = "SELECT COUNT(*) FROM MONTHLYINVOICE WHERE INVOICE_STATUS "
                + " LIKE 'APPROVED' AND GRADE_ID LIKE '"+gradeID+"'"
                + " AND TIME_CODE LIKE '"+timeCode+"'";
        String approved  = gdb.getSingleColumnData(query);
        
        query = "SELECT COUNT(*) FROM MONTHLYINVOICE WHERE INVOICE_STATUS "
                + " LIKE 'CHANGED' AND GRADE_ID LIKE '"+gradeID+"'"
                + " AND TIME_CODE LIKE '"+timeCode+"'";
        String changed  = gdb.getSingleColumnData(query);

        query = "SELECT COUNT(*) FROM MONTHLYINVOICE WHERE INVOICE_STATUS "
                + " LIKE 'ISSUED' AND TIME_CODE LIKE '"+timeCode+"'";
        String issued  = gdb.getSingleColumnData(query);

        
        if(drafted.compareToIgnoreCase("")==0 || drafted == null)
            drafted = "0";

        if(approved.compareToIgnoreCase("")==0 || approved == null)
            approved = "0";

        if(changed.compareToIgnoreCase("")==0 || changed == null)
            changed = "0";

        if(issued.compareToIgnoreCase("")==0 || issued == null)
            issued = "0";

        String msg = "Total Number of Active Enrollments: "+cenrollment+"\n";
        msg+="Total Number of Drafted Invoices: "+drafted+"\n";
        msg+="Total Number of Approved Invoices: "+approved+"\n";
        msg+="Total Number of Changed Invoices: "+changed+"\n";
        msg+="Total Number of Issued Invoices: "+issued+"\n";

        taStatus.setText(msg);

    }
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FInvoiceApproval().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private mysd.CCMBGrade cmbGrade;
    private mysd.CCMBTimeCode cmbStatus;
    private mysd.CCMBTimeCode cmbTimeCode;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JEditorPane taStatus;
    private javax.swing.JTable tblInvoice;
    // End of variables declaration//GEN-END:variables

}
